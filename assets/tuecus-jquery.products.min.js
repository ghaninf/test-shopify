/*!
 * JavaScript Cookie v2.2.1
 * https://github.com/js-cookie/js-cookie
 *
 * Copyright 2006, 2015 Klaus Hartl & Fagner Brack
 * Released under the MIT license
 */
;(function (factory) {
	var registeredInModuleLoader;
	if (typeof define === 'function' && define.amd) {
		define(factory);
		registeredInModuleLoader = true;
	}
	if (typeof exports === 'object') {
		module.exports = factory();
		registeredInModuleLoader = true;
	}
	if (!registeredInModuleLoader) {
		var OldCookies = window.Cookies;
		var api = window.Cookies = factory();
		api.noConflict = function () {
			window.Cookies = OldCookies;
			return api;
		};
	}
}(function () {
	function extend () {
		var i = 0;
		var result = {};
		for (; i < arguments.length; i++) {
			var attributes = arguments[ i ];
			for (var key in attributes) {
				result[key] = attributes[key];
			}
		}
		return result;
	}

	function decode (s) {
		return s.replace(/(%[0-9A-Z]{2})+/g, decodeURIComponent);
	}

	function init (converter) {
		function api() {}

		function set (key, value, attributes) {
			if (typeof document === 'undefined') {
				return;
			}

			attributes = extend({
				path: '/'
			}, api.defaults, attributes);

			if (typeof attributes.expires === 'number') {
				attributes.expires = new Date(new Date() * 1 + attributes.expires * 864e+5);
			}

			// We're using "expires" because "max-age" is not supported by IE
			attributes.expires = attributes.expires ? attributes.expires.toUTCString() : '';

			try {
				var result = JSON.stringify(value);
				if (/^[\{\[]/.test(result)) {
					value = result;
				}
			} catch (e) {}

			value = converter.write ?
				converter.write(value, key) :
				encodeURIComponent(String(value))
					.replace(/%(23|24|26|2B|3A|3C|3E|3D|2F|3F|40|5B|5D|5E|60|7B|7D|7C)/g, decodeURIComponent);

			key = encodeURIComponent(String(key))
				.replace(/%(23|24|26|2B|5E|60|7C)/g, decodeURIComponent)
				.replace(/[\(\)]/g, escape);

			var stringifiedAttributes = '';
			for (var attributeName in attributes) {
				if (!attributes[attributeName]) {
					continue;
				}
				stringifiedAttributes += '; ' + attributeName;
				if (attributes[attributeName] === true) {
					continue;
				}

				// Considers RFC 6265 section 5.2:
				// ...
				// 3.  If the remaining unparsed-attributes contains a %x3B (";")
				//     character:
				// Consume the characters of the unparsed-attributes up to,
				// not including, the first %x3B (";") character.
				// ...
				stringifiedAttributes += '=' + attributes[attributeName].split(';')[0];
			}

			return (document.cookie = key + '=' + value + stringifiedAttributes);
		}

		function get (key, json) {
			if (typeof document === 'undefined') {
				return;
			}

			var jar = {};
			// To prevent the for loop in the first place assign an empty array
			// in case there are no cookies at all.
			var cookies = document.cookie ? document.cookie.split('; ') : [];
			var i = 0;

			for (; i < cookies.length; i++) {
				var parts = cookies[i].split('=');
				var cookie = parts.slice(1).join('=');

				if (!json && cookie.charAt(0) === '"') {
					cookie = cookie.slice(1, -1);
				}

				try {
					var name = decode(parts[0]);
					cookie = (converter.read || converter)(cookie, name) ||
						decode(cookie);

					if (json) {
						try {
							cookie = JSON.parse(cookie);
						} catch (e) {}
					}

					jar[name] = cookie;

					if (key === name) {
						break;
					}
				} catch (e) {}
			}

			return key ? jar[key] : jar;
		}

		api.set = set;
		api.get = function (key) {
			return get(key, false /* read as raw */);
		};
		api.getJSON = function (key) {
			return get(key, true /* read as json */);
		};
		api.remove = function (key, attributes) {
			set(key, '', extend(attributes, {
				expires: -1
			}));
		};

		api.defaults = {};

		api.withConverter = init;

		return api;
	}

	return init(function () {});
}));
/**
 * Module to show Recently Viewed Products
 *
 * Copyright (c) 2014 Caroline Schnapp (11heavens.com)
 * Dual licensed under the MIT and GPL licenses:
 * http://www.opensource.org/licenses/mit-license.php
 * http://www.gnu.org/licenses/gpl.html
 *
 */
 
 function extend(a, b){
    for(var key in b)
        if(b.hasOwnProperty(key))
            a[key] = b[key];
    return a;
}

function inArray( elem, array ) {
    if ( array.indexOf ) {
        return array.indexOf( elem );
    }

    for ( var i = 0, length = array.length; i < length; i++ ) {
        if ( array[ i ] === elem ) {
            return i;
        }
    }

    return -1;
};

 Shopify.Products = (function() {

   var config = { 
     howManyToShow: 10,
     howManyToStoreInMemory: 10, 
     wrapperId: 'recently-viewed-products', 
     templateId: 'recently-viewed-product-template',
     onComplete: null,
	 isProductView: false
   };
   
   var productHandleQueue = [];
   var wrapper = null;
   var template = null;
   var shown = 0;

   var cookie = {
     configuration: {
       expires: 90,
       path: '/',
       domain: window.location.hostname
     },
     name: 'shopify_recently_viewed',
     write: function(recentlyViewed) {
       //jQuery.cookie(this.name, recentlyViewed.join(' '), this.configuration);
	   Cookies.set(this.name, recentlyViewed.join(' '), this.configuration);
     },
     read: function() {
       var recentlyViewed = [];
       //var cookieValue = jQuery.cookie(this.name);
	   var cookieValue = Cookies.get(this.name);
       if (cookieValue !== null && typeof cookieValue !== 'undefined') {
         recentlyViewed = cookieValue.split(' ');
       }
       return recentlyViewed;        
     },
     destroy: function() {
      // jQuery.cookie(this.name, null, this.configuration);
	   Cookies.set(this.name, null, this.configuration);
     },
     remove: function(productHandle) {
       var recentlyViewed = this.read();
       //var position = jQuery.inArray(productHandle, recentlyViewed);
	   var position = inArray(productHandle, recentlyViewed);
	   
       if (position !== -1) {
         recentlyViewed.splice(position, 1);
         this.write(recentlyViewed);
       }       
     }
   };
   
   var finalize = function() {
    // wrapper.show();
	 wrapper.style.display="block";
     // If we have a callback.
     if (config.onComplete) {
       try { config.onComplete() } catch (error) { }
     }  
   };
   
   var moveAlong = function() {
     if (productHandleQueue.length && shown < config.howManyToShow) {
      

	 /*  jQuery.ajax({
         dataType: 'json',
         url: '/products/' + productHandleQueue[0] + '.js',
         cache: false,
         success: function(product) {
           template.tmpl(product).appendTo(wrapper); 
           productHandleQueue.shift();
           shown++;
           moveAlong();
         },
         error: function() {
           cookie.remove(productHandleQueue[0]);
           productHandleQueue.shift();
           moveAlong();
         }
       }); */
	   
	   
	    var url='/products/' + productHandleQueue[0] + '.js';
		const xhr = new XMLHttpRequest();
		 xhr.open('GET', url, true);
		 xhr.onreadystatechange = () => {
			if (xhr.readyState > 3) { 
			 
				var resdata = xhr.responseText;
				//console.log(resdata);
				//deleteCookie('tref');
			  //success(xhr);
			   var product = JSON.parse(resdata);
			  // console.log(product);
			   var data = '';
			   if(config.isProductView) {
					data='<div id="product-'+product.handle+'" class="tuecus-product"><div class="tuecus-image"><a href="'+product.url+'"><img src="'+product.featured_image+'" /></a></div><div class="tuecus-details"><a href="'+product.url+'"><span class="tuecus-title">'+product.title+'</span><span class="tuecus-price">';
					
					if(product.price_varies) {
						data +='From '+shop_symbol+(product.price_min/100) + '-'+(product.price_max/100); 	
					} else {
						data +=	shop_symbol+(product.price_min/100);
					}
					
					data +='</a></div></div>';
			   } else {
				
					 data='<div id="product-'+product.handle+'" class="tuecus-col-md-3 tuecus-ml-3 tuecus-border tuecus-p-3 tuecus-recently-viewed-product tuecus-float-left tuecus-mb-3 tuecus-acc-recently-viewed"><a href="'+product.url+'"><img src="'+product.featured_image+'" class="tuecus-img-thumbnail tuecus-mx-auto tuecus-d-block"></a> <small><a href="'+product.url+'" class="tuecus-mb-1 tuecus-d-block tuecus-font-weight-600">'+product.title+'</a></small><div class="tuecus-col-md-12" id="product_variants_'+product.id+'" data-variants='+btoa(JSON.stringify(product.variants))+'>';
					 
					 if(product.variants.length == 1 && product.variants[0].title == 'Default Title') {
						 
						  data+='<select class="tuecus-custom-select tuecus-mt-2 tuecus-form-control-sm tuecus-shadow-sm">';
						 
						 for(var i=0; i<product.variants.length;i++) {
							 data+='<option value="'+product.variants[i].id+'">'+product.variants[i].title+'</option>';
									 
						 } 
						 data+='</select>';
					 } else {
						 
						 for(var x=0;x<product.options.length; x++) {
							 data+='<select class="tuecus-custom-select tuecus-mt-2 tuecus-form-control-sm tuecus-shadow-sm tuecus-product-option-select-'+product.id+'">';
							  for(var y=0;y<product.options[x]['values'].length; y++) {
								  
									data+='<option value="'+product.options[x].values[y]+'">'+product.options[x].values[y]+'</option>';
							  }
							  data+='</select>';
						 }
						
					 }
					 /* <option value="1">Default Title 1</option> */
					 
					 
					 data+='</div><div class="tuecus-input-group tuecus-mt-3 tuecus-mb-3"><span class="tuecus-input-group-btn"><button id="decrement_qty_'+product.id+'" type="button" class="tuecus-btn tuecus-btn-default tuecus-btn-number tuecus-border tuecus-border-grey" disabled="disabled" data-type="minus" data-field="quant[1]" onclick="decrementqty('+product.id+')"><span class="fa fa-minus"></span></button></span><input type="text" name="quant[1]" class="tuecus-form-control tuecus-input-number tuecus-input-sm" value="1" min="1" max="10" id="input_qty_'+product.id+'"><span class="tuecus-input-group-btn"><button id="increcrement_qty_'+product.id+'" type="button" class="tuecus-btn tuecus-btn-default tuecus-btn-number tuecus-border tuecus-border-grey" data-type="plus" data-field="quant[1]" onclick="incrementqty('+product.id+')"><span class="fa fa-plus"></span></button></span></div><h6 class="tuecus-d-flex tuecus-justify-content-start tuecus-justify-content-md-center tuecus-mb-3">';
		
					if(product.price_varies) {
						data +='From '+shop_symbol+(product.price_min/100) + '-'+(product.price_max/100); 	
					} else {
						data +=	shop_symbol+(product.price_min/100);
					}
		
					data +='</h6><div class="col text-center"><button data-toggle="modal"  class="tuecus-ml-md-3 tuecus-ml-0 tuecus-font-weight-600 tuecus-text-uppercase tuecus-btn tuecus-btn-success tuecus-btn-md  tuecus-pt-1" type="button" id="add_to_cart_btn_'+product.id+'" onclick="onaddtocartclick('+product.id+')"><small>'+add_to_cart_str+' &nbsp; <i class="fa fa-shopping-basket"></i></small></button></div></div>';
				
			   }
  
				//ref https://stackoverflow.com/questions/10309650/add-elements-to-the-dom-given-plain-text-html-using-only-pure-javascript-no-jqu
				
			  //template.tmpl(product).appendTo(wrapper); 
			  
				//$(data).appendTo(wrapper);
				//wrapper.insertAdjacentHTML("beforeend", data);
				wrapper.innerHTML = wrapper.innerHTML + data;
			 //  console.log(product);
			   productHandleQueue.shift();
			   shown++;
			   moveAlong();
		   
			  
			} else  {
				/* 
				 cookie.remove(productHandleQueue[0]);
				 productHandleQueue.shift();
				 moveAlong(); */
		   
			}
				
		 };
		 xhr.setRequestHeader('Content-Type', 'application/json; charset=UTF-8');
		 xhr.setRequestHeader('X-Requested-With', 'XMLHttpRequest');
		 xhr.send();
	   
     }
     else {
       finalize();
     }
     
   };
   
   return {
    
     resizeImage: function(src, size) {
       if (size == null) {
         return src;
       }

       if (size == 'master') {
         return src.replace(/http(s)?:/, "");
       }

       var match  = src.match(/\.(jpg|jpeg|gif|png|bmp|bitmap|tiff|tif)(\?v=\d+)?/i);

       if (match != null) {
         var prefix = src.split(match[0]);
         var suffix = match[0];

         return (prefix[0] + "_" + size + suffix).replace(/http(s)?:/, "")
       } else {
         return null;
       }
     },

     showRecentlyViewed: function(params) {

       var params = params || {};

       // Update defaults.
       //jQuery.extend(config, params);
		config = extend(config, params);
       // Read cookie.
       productHandleQueue = cookie.read();
       
       // Template and element where to insert.
      // template = jQuery('#' + config.templateId);
      // wrapper = jQuery('#' + config.wrapperId);
	  
	  template = document.getElementById(config.templateId);
	   wrapper = document.getElementById(config.wrapperId);
       
       // How many products to show.
       config.howManyToShow = Math.min(productHandleQueue.length, config.howManyToShow);

       // If we have any to show.
       if (config.howManyToShow && template && wrapper) {
         // Getting each product with an Ajax call and rendering it on the page.
         moveAlong();    
       }

     },

     getConfig: function() {
       return config;
     },

     clearList: function() {
       cookie.destroy();      
     },
     
     recordRecentlyViewed: function(params) {

       var params = params || {};

       // Update defaults.
       //jQuery.extend(config, params);
		config = extend(config, params);

       // Read cookie.
       var recentlyViewed = cookie.read();

       // If we are on a product page.
       if (window.location.pathname.indexOf('/products/') !== -1) {

         // What is the product handle on this page.
         var productHandle = window.location.pathname.match(/\/products\/([a-z0-9\-]+)/)[1];
         // In what position is that product in memory.
         //var position = jQuery.inArray(productHandle, recentlyViewed);
		 var position = inArray(productHandle, recentlyViewed);
         // If not in memory.
         if (position === -1) {
           // Add product at the start of the list.
           recentlyViewed.unshift(productHandle);
           // Only keep what we need.
           recentlyViewed = recentlyViewed.splice(0, config.howManyToStoreInMemory);
         }
         else {
           // Remove the product and place it at start of list.
           recentlyViewed.splice(position, 1);
           recentlyViewed.unshift(productHandle);              
         }

         // Update cookie.
         cookie.write(recentlyViewed);

       }
       
     }

   };

 })();